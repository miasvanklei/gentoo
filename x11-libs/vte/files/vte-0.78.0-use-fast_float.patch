--- a/meson.build
+++ b/meson.build
@@ -663,6 +663,13 @@ endif
 
 config_h.set10('WITH_SYSTEMD', systemd_dep.found())
 
+# Try fast_float.h from system headers, else fall back to subproject
+if cxx.has_header('fast_float/fast_float.h')
+  fast_float_dep = dependency('', required: false)
+else
+  fast_float_dep = dependency('fast_float', required: true)
+endif
+
 # Write config.h
 
 config_sources = [
--- a/src/color-parser.cc
+++ b/src/color-parser.cc
@@ -29,6 +29,8 @@
 
 #include <glib.h>
 
+#include <fast_float/fast_float.h>
+
 #include "color-names.hh"
 
 namespace vte::color::impl {
@@ -298,7 +300,7 @@ parse_csslike(std::string const& spec) noexcept
                 auto value = uint64_t{};
                 auto const start = spec.c_str() + 1;
                 auto const end = spec.c_str() + spec.size();
-                auto const rv = std::from_chars(start, end, value, 16);
+                auto const rv = fast_float::from_chars(start, end, value, 16);
                 if (rv.ec != std::errc{} || rv.ptr != end)
                         return std::nullopt;
 
@@ -424,7 +426,7 @@ parse_x11like(std::string const& spec) noexcept
                 auto value = uint64_t{};
                 auto const start = spec.c_str() + 1;
                 auto const end = spec.c_str() + spec.size();
-                auto const rv = std::from_chars(start, end, value, 16);
+                auto const rv = fast_float::from_chars(start, end, value, 16);
                 if (rv.ec != std::errc{} || rv.ptr != end)
                         return std::nullopt;
 
@@ -447,13 +449,13 @@ parse_x11like(std::string const& spec) noexcept
                 // Note that the length check above makes sure that @r, @g, @b,
                 // don't exceed @bits.
                 auto r = UINT64_C(0), b = UINT64_C(0), g = UINT64_C(0);
-                auto rv = std::from_chars(start, end, r, 16);
+                auto rv = fast_float::from_chars(start, end, r, 16);
                 if (rv.ec != std::errc{} || rv.ptr == end || *rv.ptr != '/')
                         return std::nullopt;
-                rv = std::from_chars(rv.ptr + 1, end, g, 16);
+                rv = fast_float::from_chars(rv.ptr + 1, end, g, 16);
                 if (rv.ec != std::errc{} || rv.ptr == end || *rv.ptr != '/')
                         return std::nullopt;
-                rv = std::from_chars(rv.ptr + 1, end, b, 16);
+                rv = fast_float::from_chars(rv.ptr + 1, end, b, 16);
                 if (rv.ec != std::errc{} || rv.ptr != end)
                         return std::nullopt;
 
--- a/src/meson.build
+++ b/src/meson.build
@@ -325,6 +325,7 @@ libvte_common_public_deps = [
 
 libvte_common_deps = libvte_common_public_deps + [
   cairo_gobject_dep,
+  fast_float_dep,
   fribidi_dep,
   gnutls_dep,
   icu_dep,
@@ -646,7 +646,10 @@ test_colors_sources = config_sources + debug_sources + glib_glue_sources + color
 test_colors = executable(
   'test-colors',
   cpp_args: ['-DVTE_GTK=0'],
-  dependencies: [glib_dep],
+  dependencies: [
+    glib_dep,
+    fast_float_dep,
+  ],
   include_directories: top_inc,
   install: false,
   sources: test_colors_sources,
@@ -845,7 +848,10 @@ test_termprops_sources = color_sources + config_sources + debug_sources + glib_g
 
 test_termprops = executable(
   'test-termprops',
-  dependencies: [glib_dep],
+  dependencies: [
+    glib_dep,
+    fast_float_dep,
+  ],
   include_directories: top_inc,
   install: false,
   sources: test_termprops_sources,
--- a/src/termprops.hh
+++ b/src/termprops.hh
@@ -34,6 +34,8 @@
 #include <variant>
 #include <version>
 
+#include <fast_float/fast_float.h>
+
 namespace vte::terminal {
 
 using namespace std::literals::string_literals;
@@ -355,9 +357,9 @@ inline std::optional<TermpropValue>
 parse_termprop_integral(std::string_view const& str) noexcept
 {
         auto v = T{};
-        if (auto [ptr, err] = std::from_chars(std::begin(str),
-                                              std::end(str),
-                                              v);
+        if (auto [ptr, err] = fast_float::from_chars(std::begin(str),
+                                                     std::end(str),
+                                                     v);
             err == std::errc() && ptr == std::end(str)) {
                 if constexpr (std::is_unsigned_v<T>) {
                         return uint64_t(v);
@@ -389,10 +391,9 @@ inline std::optional<TermpropValue>
 parse_termprop_floating(std::string_view const& str) noexcept
 {
         auto v = T{};
-        if (auto [ptr, err] = std::from_chars(std::begin(str),
-                                              std::end(str),
-                                              v,
-                                              std::chars_format::general);
+        if (auto [ptr, err] = fast_float::from_chars(std::begin(str),
+                                                     std::end(str),
+                                                     v);
             err == std::errc() &&
             ptr == std::end(str) &&
             std::isfinite(v)) {
